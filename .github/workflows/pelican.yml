name: Pelican
on: [pull_request]
jobs:
  Build-Pelican-Site:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: Install pelican files
        run: |
          python -m pip install "pelican[markdown]"
          python -m pip install webassets
          python -m pip install --upgrade jinja2
          python -m pip install ghp-import==0.2.2
          python -m pip install i18n_subsites
      - name: Clone pelican-plugins
        run: |
          git clone --recursive https://github.com/getpelican/pelican-plugins
      - name: Build site
        run: |
          pelican content -o output -s pelicanconf.py
      - name: Print contents of output dir
        run: |
          ls output
      - name: Copy output dir contents to gh-pages  # will be in a separate repo in final version
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages # The branch name where you want to push the assets
          FOLDER: output # The directory where your assets are generated
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
          MESSAGE: "Build: ({sha}) {msg}" # The commit message
      - run: echo "🍏 This job's status is ${{ job.status }}."
